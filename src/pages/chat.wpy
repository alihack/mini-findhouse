<style lang="less">
@import '../styles/base.less';
.container {
	.reverse {flex-direction: row-reverse}
	.chat {
		padding:10rpx 30rpx 130rpx 30rpx;
		width: 100%;
		box-sizing: border-box;
		&-item {
			margin:40rpx 0;
			.time {
				width: 220rpx;
				height: 40rpx;
				line-height: 40rpx;
				background: #CECECE;
				color: #ffffff;
				font-size: 24rpx;
				margin: 20rpx auto;
				text-align: center;
				border-radius:5rpx;
			}
			.main {
				display: flex;
				align-items: flex-start;
				margin-top: 20rpx;
				.avatar {
					width: 80rpx;
					height: 80rpx;
					border-radius: 80rpx;
				}
				.card {
					width: 450rpx;
					height: 460rpx;
					border-radius: 10rpx;
					background: #ffffff;
					margin:0 20rpx;
					image {
						border-top-right-radius:10rpx;
						border-top-left-radius:10rpx;
						width: 100%;
						height: 240rpx;
					}
					.title {
						font-size: 32rpx;
						font-weight: bold;
						padding: 10rpx 20rpx;
						box-sizing: border-box;
						width: 100%;
						height: 104rpx;
						overflow: hidden;
					}
					.detail {
						font-size: 24rpx;
						color: @gray;
						padding: 0rpx 20rpx;
					}
					.price {
						font-size: 30rpx;
						color: @gold;
						padding: 0rpx 20rpx;
						margin-top:10rpx;
					}
				}
				.photo {
					width: 450rpx;
					height: 450rpx;
					border-radius: 10rpx;
					margin:0 20rpx;
				}
				.content {
					background: #fff;
					max-width: 400rpx;
					padding: 20rpx 30rpx;
					border-radius: 10rpx;
					margin:0 20rpx;
				}
				.audio {
					height: 60rpx;
					background: #7ED321;
					border-radius: 5rpx;
					display: flex;
					align-items: center;
					justify-content: space-between;
					padding: 10rpx 15rpx;
					width:192rpx;
					transition: width 1s linear;
					margin:0 20rpx;
					&-sound {
						width: 30rpx;
						height: 30rpx;
					}
					&-second {
						color: #FFFFFF;
						letter-spacing: 0.42px;
					}
				}
				.audio:hover, .audio:active {
					background:#add49d;
				}
			}
		}
	}
	#bottom {
		width: 100%;
		height: 2rpx;
	}

}
</style>
<template>
	<view class="container">
		<scroll-view class='chat' id="chat" style="height:{{scrollHeight}}px" scroll-y scroll-top='{{scrollInto}}'>
			<block  wx:for="{{msgList}}" wx:for-item="msg" wx:key="index" >
				<view class="chat-item">
					<view class='time'>{{msg.time}}</view>
					<view wx:for="{{msg.data}}" class="main {{item.isSelfSend ? 'reverse' : ''}}"  wx:key="index">
						<image class="avatar" src="{{item.isSelfSend ? myAvatar: friendAvatar}}"></image>
						<!-- 房屋卡片 -->
						<view wx:if="{{item.houseCard}}">
							<view class="card">
								<image mode= "scaleToFill" src="{{item.houseCard.img}}"></image>
								<view class="title">{{item.houseCard.title}}</view>
								<view class="detail">{{item.houseCard.detail}}</view>
								<view class="price">{{item.houseCard.price}}</view>
							</view>
						</view>
						<!-- 图片 -->
						<image wx:if="{{item.img}}" src="{{item.img}}" class="photo"></image>
						<!-- 语音 -->
						<view wx:if="{{item.audio && item.isSelfSend}}" class="audio" @tap="playAudio({{item.audio}})">
							<view class="audio-second"> "</view>
							<image class="audio-sound" src="../images/chat-sound-right.png"/>
						</view>
						<view wx:if="{{item.audio && !item.isSelfSend}}" class="audio" @tap="playAudio({{item.audio}})">
							<image class="audio-sound" src="../images/chat-sound-left.png"/>
							<view class="audio-second"> "</view>
						</view>
						<!-- 文字 -->
						<view wx:if="{{item.html}}" class="content">{{item.html}}</view>
					</view>
				</view>
			</block>
			<view id="bottom"></view>
		</scroll-view>
		<chatBar :friendId.sync="friendId"></chatBar>
	</view>
</template>

<script>
import wepy from 'wepy'
import chatBar from '../components/bar_chat'
import {getC2CHistoryMsgs, convertTime, convertCustomMsgToHtml, initIM, sendMessage, sendMsgsToServer} from '../utils/util'
export default class Chat extends wepy.page {
	config = {
		navigationBarTitleText: '对话',
		navigationBarBackgroundColor: '#f5f5f5'
	}
	components = {
		chatBar
	}

	data = {
		houseCard: {
			img: '',
			title: '',
			detail: '',
			price: ''
		},
		friendAvatar: '',
		friendId: '',
		friendName: '',
		myAvatar: '',
		myUid: '',
		scrollInto: '',
		scrollHeight: '',
		msgList: [],
		msgLength: 1,
		innerAudio: wepy.createInnerAudioContext(), // 播放语音实例
	}

	computed = {
	}

	watch = {
		msgLength() {
			// 自动滚动到底部,只要srcollInto的值大于窗口，就能到底部
			this.scrollInto = 60 + this.msgLength * 250
			this.$apply()
		}
	}

	events = {
		async addMessage(value, type) {
			await this.msgController(value, true, type)
		}
	}
	async refresh() {
		if (!this.friendId) return
		const onMsgNotify = (newMsgList) => {
				console.log('新消息', newMsgList)
				// 判断是否为当前聊天对象,是的话插入
				newMsgList.forEach(async ele => {
					if (ele.fromAccount == this.friendId || ele.fromAccount == this.myUid) {
						const value = await convertCustomMsgToHtml(ele)
						var type
						if (value.indexOf('qimg.fangzi.xiaoyu.com/img') != -1) {
							type = 'img'
						} else if (value.indexOf('qimg.fangzi.xiaoyu.com/audio') != -1) {
							type = 'audio'
						}
						await this.msgController(value, false, type)
					}
				})
		}
		await initIM(onMsgNotify)
		const data = await getC2CHistoryMsgs(this.friendId, true)
		this.msgList = data.newMsgList
		this.msgLength = data.Msglength
		// 向经纪人发送房源信息
		const pages = getCurrentPages()
		const prevPage = pages[pages.length - 2]
		const currentHouse = prevPage.data.currentHouse
		if (currentHouse) {
			console.log('从咨询来的')
			this.houseCard.img = currentHouse.photoUrl[0]
			this.houseCard.title = currentHouse.title
			const houseType = currentHouse.countF + '室' + currentHouse.countT + '厅' + currentHouse.countW + '卫'
			const houseSquare = currentHouse.square + 'm²'
			const direction = currentHouse.direction
			this.houseCard.price = currentHouse.sellPrice + '万'
			this.houseCard.detail = houseType + ' | ' + houseSquare + ' | ' + direction
			await sendMessage(JSON.stringify({houseCard: this.houseCard}), this.friendId, true)
			await this.msgController(this.houseCard, true)
		}
		this.$apply()
	}
	async onShow() {
		this.refresh()
	}
	async onLoad({friendId, friendAvatar, friendName}) {
		this.friendAvatar = friendAvatar
		this.friendId = friendId
		this.friendName = friendName
		this.myAvatar = wepy.$instance.globalData.myUserInfo.headimg
		this.myUid = wepy.$instance.globalData.myUserInfo.uid
		wx.setNavigationBarTitle({title: friendName})
		this.scrollHeight = wx.getSystemInfoSync().windowHeight
		// 设置缓存中unread为0
		const unreadList = wx.getStorageSync('unread')
		unreadList.forEach(ele => {
			if (ele.fid == this.friendId) ele.number = 0
		})
		wx.setStorageSync('unread', unreadList)
		this.$apply()
	}
	onUnload () {
		console.log('页面离开')
		this.innerAudio.stop()
	}
	msgController(value, isSelfSend, type) {
		return new Promise(resolve => {
			// 向窗口添加一条消息
			const nowTime = convertTime(new Date().getTime())
			const item = {}
			if (typeof value == 'object') {
				item.houseCard = value
			} else {
				if (type == 'img') {
					item.img = 'http://' + value
				} else if (type == 'audio') {
					item.audio = 'http://' + value
				} else {
					item.html = value
				}
			}
			item.time = nowTime
			item.isSelfSend = isSelfSend
			// 如果当前时间跟最后一条时间一样，并入最后一数组
			if (this.msgList.length != 0) {
				if (this.msgList[this.msgList.length - 1].time == nowTime) {
					this.msgList[this.msgList.length - 1].data.push(item)
				} else {
					this.msgList.push({time: nowTime, data: [item]})
				}
			} else {
				this.msgList.push({time: nowTime, data: [item]})
			}
			this.msgLength ++
			this.$apply()
			resolve()
			// 保存消息到后端服务器
			const msgToServerItem = {time: nowTime, data: JSON.stringify([item])}
			sendMsgsToServer(this.friendId, [msgToServerItem])
		})
	}

	methods = {
		toMessage() {
			wepy.navigateTo({url: 'agent_message'})
		},
		toHome() {
			wepy.navigateTo({url: 'agent_home'})
		},
		quit () {
			wepy.navigateTo({url: 'login_wx'})
		},
		playAudio(audioURL) {
			console.log('inner', this.innerAudio)
			this.innerAudio.src = audioURL
			this.innerAudio.play()
		}
	}
}
</script>
